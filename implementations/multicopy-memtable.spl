options "-abspreds -simplearrays -propreads -stratify"

include "array_util.spl"

pure function KS() returns (res: Set<K>)
{
  { k: K :: lt(k, top) }
}

datatype KT = pair(key: K, ts: Int)

datatype OptionTS = someTS(tst: Int) | noneTS

datatype OptionNode = someNode(nd: Node) | noneNode

struct Node {
  var len: Int;
  var keys: Array<K>;
  var ptrs: Array<Node>;
  // TODO why can't we just use an array of keys and an array of timestamps?
  var table: Array<KT>;
  var tableLen: Int;
}

const B: Int

axiom B > 1


define hrepSpatial(x) {
  acc(x) &*& acc(x.keys) &*& acc(x.ptrs) &*& acc(x.table)
  &*& x.keys.length == 2*B &*& x.ptrs.length == 2*B
}

define map_of_table(A, Alen, C) {
  true
  &*& (forall k: K, i: Int :: 0 <= i < Alen && A[i].key == k
    && (forall j: Int :: i < j < Alen ==> A[j].key != k)
    ==> C[k] == A[i].ts)
  &*& (forall k: K :: (forall j: Int :: 0 <= j < Alen ==> A[j].key != k)
    ==> C[k] == 0)
}

// TODO what's the difference between hrep and node?
define hrep(n, es, C) {
  hrepSpatial(n)
  &*& map_of_table(n.table, n.tableLen, C)
  &*& 0 <= n.tableLen <= n.table.length
}

// TODO make n first or last arg
define node(r, n, es, Cn) {
  hrep(n, es, Cn)
  &*& (n.ptrs[0] == null  // Leaf
      &*& (forall n1: Node :: es[n1] == {})
    || n.ptrs[0] != null  // Internal
      && (forall i: Int :: 0 <= i <= n.len ==> n != n.ptrs[i])
      && (forall i: Int, j: Int :: 0 <= i < j <= n.len ==> n.ptrs[i] != n.ptrs[j]
        @(noinst i) @(noinst j))
      && (forall i: Int :: 0 <= i <= n.len ==> n.ptrs[i] != null)
      && (forall i: Int, k: K :: 0 <= i <= n.len ==>
        (k in es[n.ptrs[i]]
          && (0 < i ==> le(n.keys[i-1], k)) && (i < n.len ==> lt(k, n.keys[i]))
        || k !in es[n.ptrs[i]]
          && !((i <= 0 || le(n.keys[i-1], k)) && (i >= n.len || lt(k, n.keys[i]))))
        @(matching n.ptrs[i] yields n.keys[i - 1])
        @(matching n.ptrs[i] yields n.keys[i]))
  )
  // Keys are sorted
  &*& sorted_map_seg(n.keys.map, 0, n.len) == true
  &*& 0 <= n.len <= n.keys.length
}

lemma node_sep_star(r: Node, n: Node, es: Map<Node, Set<K>>, es1: Map<Node, Set<K>>, C: Map<K, Int>, C1: Map<K, Int>)
  requires node(r, n, es, C) &*& node(r, n, es1, C1)
  ensures false
{}

procedure init()
  returns (r: Node, es: Map<Node, Set<K>>, Cr: Map<K, Int>)
  ensures node(r, r, es, Cr)
{
  r := new Node;
  r.keys := new Array<K>(2*B);
  r.ptrs := new Array<Node>(2*B);
  r.table := new Array<KT>(2*B);
  arr_init_node(r.ptrs, 2*B, null);
  r.len := 0;
  r.tableLen := 0;

  es := { n: Node :: {} };
  Cr := { k: K :: 0 };

  return r, es, Cr;
}

// TODO which ones need to be implicit?
procedure inContents(n: Node, k: K,
    ghost r: Node, ghost es: Map<Node, Set<K>>, ghost Cn: Map<K, Int>)
  returns (res: OptionTS)
  requires node(r, n, es, Cn)
  ensures node(r, n, es, Cn) &*& (res != noneTS ==> Cn[k] == res.tst)
{
  var i := n.tableLen - 1;
  var flag := false;
  while (i >= 0 && !flag)
    invariant node(r, n, es, Cn)
    invariant -1 <= i < n.tableLen
    invariant flag ==> 0 <= i < n.tableLen && n.table[i].key == k
    invariant forall j: Int :: i < j < n.tableLen ==> n.table[j].key != k
  {
    if (n.table[i].key == k) {
      flag := true;
    } else {
      i := i - 1;
    }
  }
  if (flag) {
    return someTS(n.table[i].ts);
  } else {
    return noneTS;
  }
}

// TODO add n == r to precondition?
procedure addContents(n: Node, k: K, t: Int,
    ghost r: Node, ghost es: Map<Node, Set<K>>, ghost Cn: Map<K, Int>)
  returns (succ: Bool, implicit ghost Cn1: Map<K, Int>)
  requires node(r, n, es, Cn)
  ensures node(r, n, es, Cn1)
  ensures (succ && Cn1 == Cn[k := t]) || (!succ && Cn1 == Cn)
{
  if (n.tableLen < n.table.length) {
    n.table[n.tableLen] := pair(k, t);
    n.tableLen := n.tableLen + 1;
    return true;
  } else {
    return false;
  }
}

procedure findNext(n: Node, k: K,
    ghost r: Node, ghost es: Map<Node, Set<K>>, ghost Cn: Map<K, Int>)
  returns (res: OptionNode)
  requires node(r, n, es, Cn)
  ensures node(r, n, es, Cn)
  ensures res != noneNode ==> k in es[res.nd]
  // TODO this times out:
  // ensures exists n1: Node :: res == someNode(n1) ==> k in es[n1]
  ensures res == noneNode ==> (forall n2: Node :: k !in es[n2])
{
  if (n.ptrs[0] == null) {  // Leaf node
    return noneNode;
  }

  var found, i := arr_find(n.keys, n.len, k);

  if (i < n.len && k == n.keys[i]) {  // arr_find finds upper bound, we want lower
    i := i + 1;
  }

  return someNode(n.ptrs[i]);
}