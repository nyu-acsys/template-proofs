/** Linked list implementation of the lock coupling template for linearizable dictionaries. */

options "-abspreds -simplearrays -propreads -stratify"

include "lock-coupling.spl"
include "array_util.spl"
include "css.spl"
  
/** {Spec} Definition of key space */

pure function KS() returns (res: Set<K>)
{
  { k: K :: k != top && k != bot }
}
  
/** Definition of a node */

struct Node {
  var data: K;
  var next: Node;
  var sentinel: Bool;
}

/** {Spec} Definition of heap representation predicate, node */

define hrepSpatial(x) {
  acc(x)
}

define heapGood(x) {
  x.next != x
}

// concrete keyset definition
function keyset_impl(I: Interface, n: Node) returns (res: Set<K>)
  requires acc(n)
{
  { k: K :: in_inset(k, I, n) && !(in_outset(k, I, n.next)) }
}

function edgeFn(x: Node, inflow: Map<Node, Multiset>) returns (res: Map<Node, FlowDom>)
  requires acc(x)
{
  { n1: Node ::
      (n1 != x.next || n1 == null ? domZero :
      { k: K :: lt(x.data, k) ? inflow[x][k] : 0 @(noinst k)})
  }
}

function contents(x: Node) returns (res: Set<K>)
  requires acc(x)
{
  x.sentinel ? {} : {x.data}
}

define hrep(root, x, I) {
  hrepSpatial(x) &*& heapGood(x) &*& I.dom == {x}
  && (x.sentinel == (x.data == top || x.data == bot))
  && I.inf[x][top] > 0
  && (forall k1: K :: le(x.data, k1) && k1 in KS ==> I.inf[x][k1] == 1 @(noinst k1))
  && I.out == edgeFn(x, I.inf)
  && (x.next == null && x.data == top
    || x.next != null && x.data != top)
  && (x == root ==> x.data == bot)
}

define in_keyset_impl(k, I, x) {
  in_inset(k, I, x) && !(in_outset(k, I, x.next))
}

// The good condition
define searchStrInv(root, x, I, C) {
  root != null
  && C <= KS
  && C <= keyset_impl(I, x)
      && (forall k1 in KS :: x == root ==> in_outset(k1, I, x.next) @(noinst k1))
      && (forall k1: K :: I.inf[x][k1] <= 1 @(noinst k1))
}

define node(root, n, In, C) {
  hrep(root, n, In) &*& (searchStrInv(root, n, In, C) && C == contents(n)) && intValid(In)
}

/** {Spec} Implementation-specific lemmas needed by Iris */


// Proof that concrete and abstract keysets are equivalent
lemma keyset_ok(n: Node, root: Node, I: Interface, implicit ghost C: Set<K>)
  requires node(root, n, I, C)
  pure ensures keyset_impl(I, n) == keyset(I, n)
{
  pure assert forall k : K :: k in keyset(I, n) == k in keyset_impl(I, n) with {
    if (k in keyset(I, n)) {
      pure assert !(in_outsets(k, I));
    }
    if (k in keyset_impl(I, n)) {
      pure assert !(in_outsets(k, I));
      pure assert in_inset(k, I, n);
    }
  }
}

lemma node_implies_nodeinv(root: Node, n: Node, I: Interface, C: Set<K>)
  requires node(root, n, I, C) &*& intValid(I)
  pure ensures nodeinv(root, n, I, C)
{
  keyset_ok(n, root, I);
  pure assert forall k1: K :: k1 in KS ==> n == root ==> in_outsets(k1, I) with {
    pure assert k1 in KS ==> n == root ==> in_outset(k1, I, n.next);
  }
}

lemma node_sep_star(root: Node, n: Node, I_n: Interface, I_np: Interface, C: Set<K>, Cp: Set<K>)
  requires node(root, n, I_n, C) &*& node(root, n, I_np, Cp)
  ensures false
{
  
}

/** {Spec} Auxiliary lemmas */

lemma keyset_impl_equiv(root: Node, n: Node, I: Interface, implicit ghost C: Set<K>)
  requires node(root, n, I, C)
  ensures node(root, n, I, C)
  ensures (forall k: K :: (in_keyset_impl(k, I, n) == (k in keyset_impl(I, n))) @(noinst k))
{
  pure assert forall k: K :: in_keyset_impl(k, I, n) == (k in keyset_impl(I, n)) with {
    if (k in keyset_impl(I, n)) {
      pure assert in_inset(k, I, n);
      pure assert !(in_outsets(k, I));
    }
  }
}

/** Begin programs */

/** Initialize data structure */
procedure init()
  returns (root: Node, ghost last: Node, ghost I1: Interface, ghost I2: Interface)
  ensures node(root, root, I1, {}) &*& node(root, last, I2, {})
  ensures globalinv(root, intComp(I1, I2))
  ensures intValid(intComp(I1, I2))
  ensures Disjoint(keyset_impl(I1, root), keyset_impl(I2, last))
{
  last := new Node;
  last.next := null;
  last.data := top;
  last.sentinel := true;

  root := new Node;
  root.next := last;
  root.data := bot;
  root.sentinel := true;

  
  ghost var fst_inf := { n: Node :: n == root ? { k: K :: 1 } : domZero };
  I1 := int(fst_inf, edgeFn(root, fst_inf), {root});

  assert node(root, root, I1, {}) &*& acc(last);
  
  ghost var lst_inf := { n: Node :: n == last ? { k: K :: k != bot ? 1 : 0 } : domZero };
  I2 := int(lst_inf, edgeFn(last, lst_inf), {last});

  assert node(root, last, I2, {}) &*& acc(root);

  pure assert forall k: K :: domMinus(I2.inf[last], I1.out[last])[k] >= 0 with {
    pure assert I2.inf[last][k] - I1.out[last][k] >= 0;
  }

  pure assert forall k: K :: domMinus(I1.inf[root], I2.out[root])[k] >= 0 with {
    pure assert I1.inf[root][k] - I2.out[root][k] >= 0;
  }

  pure assert domValid(domMinus(I2.inf[last], I1.out[last]));
  pure assert domValid(domMinus(I1.inf[root], I2.out[root]));

  pure assert forall k: K :: I2.inf[last][k] == domPlus(I1.out[last], domMinus(I2.inf[last], I1.out[last]))[k] with {
    pure assert I2.inf[last][k] == I1.out[last][k] + (I2.inf[last][k] - I1.out[last][k]);
    pure assert I2.inf[last][k] == I1.out[last][k] + domMinus(I2.inf[last], I1.out[last])[k];
  }

  pure assert forall k: K :: I1.inf[root][k] == domPlus(I2.out[root], domMinus(I1.inf[root], I2.out[root]))[k] with {
    pure assert I1.inf[root][k] == I2.out[root][k] + (I1.inf[root][k] - I2.out[root][k]);
    pure assert I1.inf[root][k] == I2.out[root][k] + domMinus(I1.inf[root], I2.out[root])[k];
  }
  pure assert intComposable(I1, I2);
  ghost var I := intComp(I1, I2);

  lemma_int_comp_unfold(I1, I2);

  pure assert forall n: Node, k: K :: (n !in I.dom ==> I.out[n][k] == domZero[k]) with {
    if (n !in I.dom) {
      pure assert I.out[n][k] == domPlus(I1.out[n], I2.out[n])[k];
      pure assert I.out[n][k] == I1.out[n][k] + I2.out[n][k];
    }
  }
  pure assert forall k: K :: I.inf[root][k] > 0 with {
    pure assert I1.inf[root][k] == domPlus(I.inf[root], I2.out[root])[k];
    pure assert I1.inf[root][k] == I.inf[root][k] + I2.out[root][k];
  }
  pure assert "test" forall k: K :: I.inf[last][k] == 0 with {
    pure assert "test2" I2.inf[last][k] == domPlus(I.inf[last], I1.out[last])[k];
    pure assert "test2" I2.inf[last][k] == I.inf[last][k] + I1.out[last][k];
  }
}


/** findNext */
procedure findNext(n: Node, k: K, ghost In: Interface, implicit ghost C: Set<K>, implicit ghost root: Node)
  returns (succ: Bool, np: Node, res: Bool)
  requires node(root, n, In, C)
  requires in_inset(k, In, n)
  ensures node(root, n, In, C)
  ensures succ ==> in_outset(k, In, np)
  ensures !succ ==> !(in_outsets(k, In))
  ensures res == (k in C)
{
  if (n.next == null) {
    return false, null, false;
  } else {
    if (le(k, n.data)) {
      return false, null, n.data == k && !n.sentinel;
    } else {
      return true, n.next, false;
    }
  }
}

/** search */
procedure search(n: Node, k: K, ghost In: Interface, implicit ghost C: Set<K>, implicit ghost root: Node)
  returns (res: Bool, implicit ghost C1: Set<K>)
  requires node(root, n, In, C)
  requires in_inset(k, In, n) && !(in_outsets(k, In))
  ensures node(root, n, In, C1)
  ensures Psi(searchOp, k, C, C1, res)
{
  return !n.sentinel && k == n.data;
}


/** insert */
procedure insert(p: Node, n: Node, m: Node, k: K,
                 Ip: Interface, In: Interface, Ipn: Interface,
                 implicit ghost Cp: Set<K>, implicit ghost Cn: Set<K>,
                 implicit ghost root: Node, ks: Set<K>)
  returns (Ip1: Interface, In1: Interface, Im1: Interface, Ipnm1: Interface,
  Cp1: Set<K>, Cn1: Set<K>, Cm1: Set<K>)
  requires k in KS
  requires node(root, p, Ip, Cp) &*& node(root, n, In, Cn) &*& hrepSpatial(m)
  requires Disjoint(keyset_impl(Ip, p), keyset_impl(In, n))
  requires Ipn == intComp(Ip, In) && intValid(Ipn) 
  requires Ipn.out[m] == domZero
  requires m != root && n != root
  requires k !in Cn
  requires in_outset(k, Ip, n);
  requires in_inset(k, In, n) && !(in_outsets(k, In))
  ensures node(root, p, Ip1, Cp1) &*& node(root, n, In1, Cn1) &*& node(root, m, Im1, Cm1)
  ensures Ipnm1 == intComp(Ip1, intComp(Im1, In1))
  ensures Ipnm1.inf[m] == domZero
  ensures contextualLeq(Ipn, Ipnm1)
  ensures Disjoint(keyset_impl(Ip1, p), keyset_impl(In1, n))
  ensures Disjoint(keyset_impl(Ip1, p), keyset_impl(Im1, m))
  ensures Disjoint(keyset_impl(Im1, m), keyset_impl(In1, n))
  ensures keyset_impl(Ip1, p) ++ keyset_impl(In1, n) ++ keyset_impl(Im1, m) == old(keyset_impl(Ip, p) ++ keyset_impl(In, n))
  ensures Psi(insertOp, k, Cp ++ Cn, Cp1 ++ Cn1 ++ Cm1, true)
{
  m.data := k;
  m.next := n;
  m.sentinel := false;
  p.next := m;

  // Proof - not pretty but almost all of this is just manual expansion of definitions

  pure assert n.next != m with {
    pure assert Ipn.out[m][top] == 0;
    expand_out(m, top, Ip, In);
  }
  pure assert old(p.next) == n;

  
  // Define Ip1
  Ip1 := int(Ip.inf, edgeFn(p, Ip.inf), {p});
  pure assert intValid(Ip1);
  
  // Define Im1
  ghost var minf1 := { n1: Node :: n1 == m ? { k1: K :: lt(p.data, k1) ? 1 : 0}: domZero };
  Im1 := int(minf1, edgeFn(m, minf1), {m});
  pure assert intValid(Im1);
  
  // Define In1
  ghost var ninf1 := { n1: Node :: n1 == n ? { k1: K :: In.inf[n][k1] == 1 && (le(k1, p.data) || lt(k, k1)) ? 1 : 0} : domZero };

  In1 := int(ninf1, edgeFn(n, ninf1), In.dom);
  pure assert forall n1: Node, k1: K :: ninf1[n1][k1] >= 0 with {
    pure assert n1 != n ==> ninf1[n1][k1] == 0;
    if (n == n1 && In.inf[n][k1] == 1 && (le(k1, p.data) || lt(k, k1))) {
      pure assert ninf1[n][k1] == 1;
    } else {
      pure assert ninf1[n1][k1] == 0;
    }
  }
  pure assert intValid(In1);
  
  // intComp(In1, Im1)
  pure assert intComposable(Im1, In1) with {
  pure assert forall n1: Node, k1: K ::
    n1 in In1.dom ==> In1.inf[n1][k1] == domPlus(Im1.out[n1], domMinus(In1.inf[n1], Im1.out[n1]))[k1]
    with {
      pure assert
        In1.inf[n1][k1] == Im1.out[n1][k1] + (In1.inf[n1][k1] - Im1.out[n1][k1]);
      pure assert In1.inf[n1][k1] == Im1.out[n1][k1] + domMinus(In1.inf[n1], Im1.out[n1])[k1];
  }
  pure assert forall n1: Node, k1: K ::
    n1 in Im1.dom ==> Im1.inf[n1][k1] == domPlus(In1.out[n1], domMinus(Im1.inf[n1], In1.out[n1]))[k1]
    with {
      if (n1 == m) {
        pure assert
          Im1.inf[n1][k1] == In1.out[n1][k1] + (Im1.inf[n1][k1] - In1.out[n1][k1]);
          pure assert Im1.inf[n1][k1] == In1.out[n1][k1] + domMinus(Im1.inf[n1], In1.out[n1])[k1];
      }
  }

  pure assert forall n1: Node :: n1 in Im1.dom ==> domValid(domMinus(Im1.inf[n1], In1.out[n1])) with {
    if (n1 in Im1.dom) {
      pure assert forall k: K :: domMinus(Im1.inf[n1], In1.out[n1])[k] >= 0 with {
        pure assert Im1.inf[n1][k] - In1.out[n1][k] >= 0;
      }
    }
  }

  pure assert forall n1: Node :: n1 in In1.dom ==> domValid(domMinus(In1.inf[n1], Im1.out[n1])) with {
    if (n1 in In1.dom) {
      pure assert forall k: K :: domMinus(In1.inf[n1], Im1.out[n1])[k] >= 0 with {
        expand_inf2(n1, k, Ip, In);
        pure assert In1.inf[n1][k] - Im1.out[n1][k] >= 0;
      }
    }
  }
  }

  ghost var Inm1 := intComp(Im1, In1);

  pure assert intComposable(Ip1, intComp(Im1, In1)) with {
  lemma_int_comp_unfold(Im1, In1);
  pure assert forall n1: Node, k1: K ::
    n1 in Ip1.dom ==> Ip1.inf[n1][k1] == domPlus(Inm1.out[n1], domMinus(Ip1.inf[n1], Inm1.out[n1]))[k1] with {
      if (n1 == p) {
        expand_out(n1, k1, Im1, In1);
        pure assert Ip1.inf[n1][k1] == Inm1.out[n1][k1] + (Ip1.inf[n1][k1] - Inm1.out[n1][k1]);
        pure assert Ip1.inf[n1][k1] == Inm1.out[n1][k1] + domMinus(Ip1.inf[n1], Inm1.out[n1])[k1];
      }
  }
    
  pure assert forall n1: Node, k1: K ::
    n1 in Inm1.dom ==> Inm1.inf[n1][k1] == domPlus(Ip1.out[n1], domMinus(Inm1.inf[n1], Ip1.out[n1]))[k1] with {
      if (n1 in Inm1.dom) {
        expand_inf2(n1, k1, Im1, In1);
        expand_inf1(n1, k1, Im1, In1);
        pure assert Inm1.inf[n1][k1] == Ip1.out[n1][k1] + (Inm1.inf[n1][k1] - Ip1.out[n1][k1]);
        pure assert Inm1.inf[n1][k1] == Ip1.out[n1][k1] + domMinus(Inm1.inf[n1], Ip1.out[n1])[k1];
      }
  }

  pure assert forall n1: Node :: n1 in Ip1.dom ==> domValid(domMinus(Ip1.inf[n1], Inm1.out[n1])) with {
    if (n1 in Ip1.dom) {
      pure assert forall k: K :: domMinus(Ip1.inf[n1], Inm1.out[n1])[k] >= 0 with {
        expand_out(n1, k, Im1, In1);
        pure assert Ip1.inf[n1][k] - Inm1.out[n1][k] >= 0;
      }
    }
  }

  pure assert forall n1: Node :: n1 in Inm1.dom ==> domValid(domMinus(Inm1.inf[n1], Ip1.out[n1])) with {
    if (n1 in Inm1.dom) {
      pure assert forall k: K :: domMinus(Inm1.inf[n1], Ip1.out[n1])[k] >= 0 with {
        expand_inf1(n1, k, Im1, In1);
        expand_inf2(n1, k, Im1, In1);
        pure assert Inm1.inf[n1][k] - Ip1.out[n1][k] >= 0;
      }
    }
  }
  }

  Ipnm1 := intComp(Ip1, intComp(Im1, In1));

  pure assert contextualLeq(Ipn, Ipnm1) && Ipnm1.inf[m] == domZero with {
    pure assert forall n1: Node, k1: K :: n1 in Ipn.dom ==> Ipn.inf[n1][k1] == Ipnm1.inf[n1][k1]
      && Ipnm1.inf[m][k1] == 0
      with {
        expand_inf1(n1, k1, Ip, In);
        expand_inf2(n1, k1, Ip, In);
        expand_inf1(n1, k1, Ip1, Inm1);
        expand_inf2(n1, k1, Ip1, Inm1);

        expand_inf2(n1, k1, Im1, In1);
          
        expand_out(p, k1, Im1, In1);
        expand_inf2(m, k1, Ip1, Inm1);
        expand_inf2(m, k1, Im1, In1);
        expand_inf1(m, k1, Im1, In1);
    }

    pure assert (forall n1: Node, k1: K :: n1 !in Ipn.dom ==> Ipn.out[n1][k1] == Ipnm1.out[n1][k1]) with {
      expand_out(n1, k1, Ip, In);
      expand_out(n1, k1, Im1, In1);
      expand_out(n1, k1, Ip1, Inm1);
    }
  }
  
  Cp1 := contents(p);
  Cn1 := contents(n);
  Cm1 := contents(m);
  
  pure assert "test1" old(keyset_impl(Ip, p)) == keyset_impl(Ip1, p) with {
    pure assert "test" forall k: K :: Ip.out[n][k] == Ip1.out[m][k];
    pure assert "test5" forall k: K :: old(in_keyset_impl(k, Ip, p)) == in_keyset_impl(k, Ip1, p);

    pure assert "test6" forall k: K :: old(k in keyset_impl(Ip, p)) == (k in keyset_impl(Ip1, p)) with {
      if (k in old(keyset_impl(Ip, p))) {        
        pure assert "test7" old(in_inset(k, Ip, p));
      } 
    }

    
  } // OK

  pure assert "test3"
    old(keyset_impl(In, n)) == keyset_impl(In1, n) ++ keyset_impl(Im1, m)
    && Disjoint(keyset_impl(In1, n), keyset_impl(Im1, m))
    with {
      pure assert "test2" forall k1: K :: old(k1 in keyset_impl(In, n)) ==> (k1 in keyset_impl(In1, n) || k1 in keyset_impl(Im1, m)) with {
      pure assert "test2" old(k1 in keyset_impl(In, n)) ==> old(in_inset(k1, In, n));
    } // OK
    pure assert "test4" forall k1: K :: k1 in keyset_impl(In1, n) ==> old(k1 in keyset_impl(In, n)) with {
      pure assert "test4" k1 in keyset_impl(In1, n) ==> in_inset(k1, In1, n);
    }
    pure assert "test12" forall k1: K :: (k1 in keyset_impl(Im1, m) ==> old(k1 in keyset_impl(In, n)))
      && (k1 in keyset_impl(Im1, m) ==> k1 !in keyset_impl(In1, n))
      && (k1 in keyset_impl(In1, n) ==> k1 !in keyset_impl(Im1, m))
      with {
      if (in_keyset_impl(k1, Im1, m)) {
        lemma_int_comp_unfold(Ip, In);
        pure assert "test10" In.inf[n] == domPlus(Ipn.inf[n], Ip.out[n]);
        pure assert "test10" In.inf[n][k1] == Ipn.inf[n][k1] + Ip.out[n][k1];
      }
    }
  }
}

