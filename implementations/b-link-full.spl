include "b-link-core.spl"

/** {Spec} Constraint on new interface after full split */

pure predicate comp_ok(Ipc: Interface, Ipc1: Interface, x: Node) {
  intValid(Ipc1)
    && Ipc.dom == Ipc1.dom
    && (forall n: Node :: n != x ==> Ipc1.out[n] == Ipc.out[n])
    && (forall k: K :: Ipc1.out[x][k] >= Ipc.out[x][k])
    && (forall n: Node, k: K :: Ipc1.inf[n][k] >= Ipc.inf[n][k])
}


/** Full split */

procedure full_split(p: Node, Ip: Interface, ci: Int, c: Node, Ic: Interface,
  Ipc: Interface, x: Node, implicit ghost Cp: Set<K>, implicit ghost Cc: Set<K>)
  returns (Ip1: Interface, Ic1: Interface)
  requires node(p, Ip, Cp) &*& node(c, Ic, Cc)
  requires intComp(Ip, Ic) == Ipc && intValid(Ipc)
  requires p.ptrs[0] != null && p.ptrs[ci] == c && 0 <= ci <= p.len && c.next == x
  requires p.len < 2*B - 1 && p.indices[c] == ci
  // Needed to show sortedness, and in range, of p.keys:
  requires ks_child(p, c, c.keys[c.len])
  && (ci == 0 || ci > 0 && lt(p.keys[ci - 1], c.keys[c.len]))
  // Nothing == x:
  requires p.next != x && p.indices[x] == -1
  requires p != x
  requires Ic.out[p] == domZero  // needed for int_comp_unfold

  ensures node(p, Ip1, Cp) &*& node(c, Ic1, Cc)
  //ensures intComp(Ip1, Ic1) == Ipc
  ensures comp_ok(Ipc, intComp(Ip1, Ic1), x)
{

  var pind := p.indices;  // TODO why doesn't old(p.indices) work?
  var plen := p.len;

  arr_shift(p.keys, ci, ci + 1, p.len + 1 - ci);
  arr_shift_node(p.ptrs, ci + 1, ci + 2, p.len - ci);

  var k := c.keys[c.len];  // everything >= k goes to x
  
  p.keys[ci] := k;
  p.ptrs[ci + 1] := x;
  p.len := p.len + 1;

  p.indices := { n: Node :: n == x ? ci + 1 : (ci + 1 <= pind[n] <= plen ? pind[n] + 1 : pind[n]) };

  pure assert heapGood(c) with {
    pure assert c.indices == old(c.indices);
    pure assert c.ptrs.map == old(c.ptrs.map);
  }

  pure assert heapGood(p) with {
    pure assert (forall i: Int, j: Int :: 0 <= i < j <= p.len ==> lt(p.keys[i], p.keys[j]) @(noinst i) @(noinst j)) with {  // This works, but takes ages
      pure assert ci < i <= p.len ==> p.keys[i] == old(p.keys[ci + (i - (ci + 1))]);
      pure assert ci < j <= p.len ==> p.keys[j] == old(p.keys[ci + (j - (ci + 1))]);
    }
    pure assert forall n: Node :: 0 <= p.indices[n] <= p.len ==> p.ptrs.map[p.indices[n]] == n with {
      pure assert ci + 1 < old(p.indices[n]) <= old(p.len)
        ==> old(p.ptrs.map[p.indices[n]]) == n;
      pure assert ci + 1 < old(p.indices[n]) <= old(p.len)
        ==> p.ptrs[old(p.indices[n]) + 1] == n;
        if (0 <= p.indices[n] < ci + 1) {
        } else if (p.indices[n] == ci + 1) {
        } else if (ci + 1 < p.indices[n] <= p.len) {
          pure assert old(p.indices[n]) == p.indices[n] - 1;
          pure assert p.ptrs.map[p.indices[n]] == old(p.ptrs.map)[p.indices[n] - 1];
        }
    }
    pure assert forall i: Int :: p.ptrs[0] != null && 0 <= i <= p.len ==> p.indices[p.ptrs.map[i]] == i with {
      pure assert ci + 1 < i <= p.len ==> p.ptrs[i] == old(p.ptrs.map)[(ci + 1) + (i - (ci + 2))];
    }
  }
  
  Ip1 := interface(p, Ip.inf);
  Ic1 := interface(c, Ic.inf);
  
  pure assert intComposable(Ip1, Ic1) with {
    pure assert forall n: Node :: n in Ip1.dom ==> Ip1.inf[n] == domPlus(Ic1.out[n], domMinus(Ip1.inf[n], Ic1.out[n])) with {
      if (n in Ip1.dom) {
        pure assert forall k1: K ::
            Ip1.inf[n][k1] == domPlus(Ic1.out[n], domMinus(Ip1.inf[n], Ic1.out[n]))[k1] with {
            pure assert Ic.out[p][k1] == 0; 
            pure assert Ic.inf[p][k1] >= Ic1.inf[p][k1];
            pure assert edgeFn(c, Ic.inf)[n][k1] != 0 ==> edgeFn(c, Ic.inf)[n][k1] == Ic.inf[c][k1];          
            pure assert old(edgeFn(c, Ic.inf))[n][k1] >= edgeFn(c, Ic1.inf)[n][k1];
            pure assert Ic1.out[p][k1] == 0;
            pure assert Ip1.inf[n][k1] == Ic1.out[n][k1] + (Ip1.inf[n][k1] - Ic1.out[n][k1]);
            pure assert Ip1.inf[n][k1] == Ic1.out[n][k1] + domMinus(Ip1.inf[n], Ic1.out[n])[k1];
            
            pure assert Ip1.inf[n][k1] == domPlus(Ic1.out[n], domMinus(Ip1.inf[n], Ic1.out[n]))[k1];
        }
      }
      
    }
    pure assert forall n: Node :: n in Ic1.dom ==> Ic1.inf[n] == domPlus(Ip1.out[n], domMinus(Ic1.inf[n], Ip1.out[n])) with {
      pure assert forall n: Node :: n in Ic1.dom ==> Ic1.inf[n] == domPlus(Ip1.out[n], domMinus(Ic1.inf[n], Ip1.out[n])) with {
        if (n in Ic1.dom) {
          pure assert forall k1: K ::
              Ic1.inf[n][k1] == domPlus(Ip1.out[n], domMinus(Ic1.inf[n], Ip1.out[n]))[k1] with {

            pure assert Ic.inf[n][k1] == domPlus(Ip.out[n], domMinus(Ic.inf[n], Ip.out[n]))[k1];
            pure assert Ic.inf[n][k1] == Ip.out[n][k1] + domMinus(Ic.inf[n], Ip.out[n])[k1];
            pure assert Ic.inf[n][k1] == Ip.out[n][k1] + (Ic.inf[n][k1] - Ip.out[n][k1]);
            
            pure assert Ic1.inf[n][k1] == Ip1.out[n][k1] + (Ic1.inf[n][k1] - Ip1.out[n][k1]);

            pure assert Ic1.inf[n][k1] == Ip1.out[n][k1] + domMinus(Ic1.inf[n], Ip1.out[n])[k1];
            }
        }
      }
    }
    
    pure assert forall n: Node :: n in Ip1.dom ==> domValid(domMinus(Ip1.inf[n], Ic1.out[n])) with {
      if (n in Ip1.dom) {
        pure assert forall k1: K :: domMinus(Ip1.inf[n], Ic1.out[n])[k1] >= 0 with {
          pure assert Ipc.inf[n] == domMinus(Ip.inf[n], Ic.out[n]);
          pure assert Ipc.inf[n][k1] == Ip.inf[n][k1] - Ic.out[n][k1];
          pure assert Ic.inf[n][k1] >= Ic1.inf[n][k1];
          pure assert edgeFn(c, Ic.inf)[n][k1] != 0 ==> edgeFn(c, Ic.inf)[n][k1] == Ic.inf[c][k1];          
          pure assert old(edgeFn(c, Ic.inf))[n][k1] >= edgeFn(c, Ic1.inf)[n][k1];
          pure assert Ip1.inf[n][k1] - Ic1.out[n][k1] >= 0;
          
        }
      }
    }
    
    pure assert forall n: Node :: n in Ic1.dom ==> domValid(domMinus(Ic1.inf[n], Ip1.out[n])) with {
      if (n in Ic1.dom) {
        pure assert forall k1: K :: domMinus(Ic1.inf[n], Ip1.out[n])[k1] >= 0 with {
          pure assert Ipc.inf[n] == domMinus(Ic.inf[n], Ip.out[n]);
          pure assert Ipc.inf[n][k1] >= 0;
          pure assert Ic.inf[n][k1] - Ip.out[n][k1] >= 0;
          if (lt(k1, k)) {
            pure assert n == c;
            pure assert Ip1.inf[n][k1] == Ip.inf[n][k1];
            pure assert ks_child(p, c, k1) ==> old(ks_child(p, c, k1));
            pure assert ks_child(p, c, k1) ==> (Ip.out[c][k1] == 1) == (Ip.inf[p][k1] > 0);
            pure assert ks_child(p, c, k1) ==> (Ip1.out[c][k1] == 1) == (Ip1.inf[p][k1] > 0);
            pure assert Ip1.out[n][k1] == Ip.out[n][k1];
            pure assert Ic1.inf[n][k1] - Ip1.out[n][k1] >= 0;
          } else {
            pure assert Ic1.inf[n][k1] - Ip1.out[n][k1] >= 0;
          }
        }
      }
    }
  }
  
  lemma_int_comp_fold(Ip1, Ic1);
  var Ipc1 := intComp(Ip1, Ic1);

  pure assert "test04" comp_ok(Ipc, Ipc1, x) with {
    pure assert Ipc.dom == Ipc1.dom;
    pure assert "test03" forall z: Node, k1: K :: Ipc1.inf[z][k1] >= Ipc.inf[z][k1]
      && (z != x ==> Ipc.out[z][k1] == Ipc1.out[z][k1])
      && (z = x ==> Ipc.out[z][k1] <= Ipc1.out[z][k1])
    with {
      
      if (ks_child(p, c, k1)) {
        pure assert ci < p.indices[c] <= p.len
          ==> p.keys.map[p.indices[c]] == old(p.keys.map)[ci + (p.indices[c] - (ci + 1))];
        pure assert ci < p.indices[c] - 1 <= p.len
          ==> p.keys.map[p.indices[c] - 1] == old(p.keys.map)[ci + ((p.indices[c] - 1) - (ci + 1))];
      }

      if (p.indices[z] != -1) {
        pure assert ci + 1 < old(p.indices[z]) <= old(p.len)
          ==> old(p.ptrs.map[p.indices[z]]) == z;
        pure assert ci + 1 < old(p.indices[z]) <= old(p.len)
          ==> p.ptrs[old(p.indices[z]) + 1] == z;
        if (0 <= p.indices[z] < ci + 1) {
        } else if (p.indices[z] == ci + 1) {
        } else if (ci + 1 < p.indices[z] <= p.len) {
          pure assert old(p.indices[z]) == p.indices[z] - 1;
          pure assert "test" p.ptrs.map[p.indices[z]] == old(p.ptrs.map)[p.indices[z] - 1];
        }
      }

      expand(z, k1, Ip1, Ic1);
      expand(z, k1, Ip, Ic);

    }
  }
    
  return Ip1, Ic1;
}