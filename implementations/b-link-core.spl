/** B+ tree implementation of the link template. */

options "-abspreds -simplearrays -propreads -stratify"

include "inset-flows.spl"
include "array_util.spl"

/** {Spec} Definition of keyspace */

pure function KS() returns (res: Set<K>)
{
  { k: K :: lt(k, top) }
}

function KS_multiset() returns (m: Multiset)
{
  { k: K :: k in KS ? 2 : 0 }
}


/** Definition of a node */

struct Node {
  var len: Int;
  var keys: Array<K>;
  var ptrs: Array<Node>;
  var next: Node;
  ghost var indices: Map<Node, Int>;
}

// Width of the B-trees
const B: Int

/** {Spec} Definition of heap representation predicate, node */

axiom B > 1

// Access permissions associated with a node x
predicate hrepSpatial(x: Node) {
  acc(x) &*& acc(x.keys) &*& acc(x.ptrs) &*& x.keys.length == 2*B && x.ptrs.length == 2*B
}

// k in ks_outset(x, u) for child u
define ks_child(x, u, k)
{
  (x.indices[u] == 0 || !lt(k, x.keys.map[x.indices[u] - 1])) &&
    (x.indices[u] == x.len && x.next == null && lt(k, top) || lt(k, x.keys.map[x.indices[u]]))
}

// k in edgest(x, x.next)
define map_next(x, k)
{
  x.next != null && !lt(k, x.keys[x.len]) && lt(k, top)
}

// The flow map of a B-link tree node x
function edgeFn(x: Node, inflow: Map<Node, FlowDom>)
  returns (res: Map<Node, FlowDom>)
  requires hrepSpatial(x)
{
  { n: Node ::
    0 <= x.indices[n] <= x.len ? { k: K :: ks_child(x, n, k) && inflow[x][k] > 0 ? 1 : 0} :
    (n == x.next ? { k: K :: map_next(x, k) && inflow[x][k] > 0 ? 1 : 0} : domZero)
  }
}

// Show that edgeFn is valid if inflow is valid
lemma edgeFn_valid(x: Node, inflow: Map<Node, FlowDom>)
  requires forall n: Node :: domValid(inflow[n])
  ensures forall n: Node :: domValid(edgeFn(x, inflow)[n])
{
  pure assert forall n: Node, k: K :: edgeFn(x, inflow)[n][k] >= 0 with {
    pure assert 0 <= x.indices[n] <= x.len && ks_child(x, n, k) ==> (edgeFn(x, inflow)[n][k] == 1) == inflow[x][k] > 0;
  }
  pure assert forall n: Node, k: K :: edgeFn(x, inflow)[n][k] >= 0 with {
    if (0 <= x.indices[n] <= x.len) {
      //pure assert edgeFn(x, inflow)[n][k] == 0;
    } else {
      pure assert n == x.next && map_next(x, k) ==> (edgeFn(x, inflow)[n][k] == 1) == (inflow[x][k] > 0);
    }
  }
}

// The contents of a node
function contents(x: Node) returns (C: Set<K>)
  requires hrepSpatial(x)
  requires 0 <= x.len
{
  x.ptrs[0] == null ? set_of_map(x.keys.map, 0, x.len) : {}
}

// The interface of a node
function interface(x: Node, inflow: Map<Node, FlowDom>)
  returns (res: Interface)
  requires hrepSpatial(x)
{
  int(inflow, edgeFn(x, inflow), {x})
}

// These are the conditions on the fields of x for abstraction to graph to work
define heapGood(x)
{
  x.next != x && 0 <= x.len < 2*B && (x.next == null ==> x.keys[x.len] == top)
  // Keys are sorted (TODO: internal vs. child?)
  && (forall i: Int, j: Int :: 0 <= i < j <= x.len ==> lt(x.keys[i], x.keys[j]) @(noinst i) @(noinst j))
  // All outgoing pointers are distinct
  && (forall i: Int :: x.ptrs[0] != null && 0 <= i <= x.len
       ==> x != x.ptrs[i] @(noinst i))
  && (forall i: Int :: x.ptrs[0] != null && 0 <= i <= x.len
       ==> x.ptrs[i] != x.next @(noinst i))
  && (forall i: Int, j: Int :: x.ptrs[0] != null && 0 <= i < j <= x.len
       ==> x.ptrs[i] != x.ptrs[j] @(noinst i) @(noinst j))
  // Indices of outgoing pointers are stored in x.indices
  && (forall y: Node :: 0 <= x.indices[y] <= x.len ==> x.ptrs.map[x.indices[y]] == y)
  && (forall i: Int :: x.ptrs[0] != null && 0 <= i <= x.len ==> x.indices[x.ptrs.map[i]] == i @(noinst i))
  && (forall y: Node :: -1 <= x.indices[y] <= x.len)
  && (x.ptrs[0] == null ==> (forall y: Node :: x.indices[y] == -1 @(noinst y)))
  && x.indices[x.next] == -1  // TODO these two might be redundant
  && x.indices[x] == -1
  // Internal nodes don't point to null
  && (forall i: Int :: x.ptrs[0] != null && 0 <= i <= x.len ==> x.ptrs[i] != null @(noinst i))
}

// Invariant of a B-link tree node x with flow interface I
define hrep(x, I, C) {
  hrepSpatial(x) &*& heapGood(x) &*& I == interface(x, I.inf) &*& C == contents(x)
}

// The definition of the implementation-specific node predicate assumed by Iris
define node(x, I, C) {
  hrep(x, I, C) &*& intValid(I)
}


/** {Spec} Implementation-specific lemmas needed by Iris */

// Node predicate is not duplicable
lemma node_sep_star(n: Node, I_n: Interface, I_np: Interface, C: Set<K>, Cp: Set<K>)
  requires node(n, I_n, C) &*& node(n, I_np, Cp)
  ensures false
{

}

/** {Spec} Lemmas for proofs below */

// Show that if query key k is in the keyset of node x than x must be a leaf.
lemma keyset_implies_leaf(x: Node, Ix: Interface, k: K, i: Int, implicit ghost C: Set<K>)
  requires hrep(x, Ix, C) &*& intValid(Ix)
  requires k in KS
  requires in_inset(k, Ix, x) && (forall y: Node :: !(in_outset(k, Ix, y)))
  requires (i <= 0 || !lt(k, x.keys[i-1])) && 0 <= i <= x.len
  ensures hrep(x, Ix, C)
  ensures x.ptrs[0] == null  // x is a leaf
{
  if (x.ptrs[0] != null && i < x.len && !lt(k, x.keys[i])) {
    keyset_implies_leaf(x, Ix, k, i + 1);
    return;
  } else {
    if (x.ptrs[0] != null && lt(k, x.keys[i])) {
      pure assert Ix.out[x.ptrs[i]][k] == 0;
    }
    return;
  }
}

/** Begin programs */

define emptyInt(x, Ix) {
  Ix.dom == {x} && Ix.inf[x] == domZero
  && (forall y: Node :: Ix.out[y] == domZero)
}

/** Initialize a new root node */
procedure init() returns (x: Node, I: Interface)
  ensures node(x, I, Set<K>()) &*& globalinv(x, I)
{
  x := new Node;
  x.keys := new Array<K>(2*B);
  x.keys[0] := top;
  x.ptrs := new Array<Node>(2*B);
  x.ptrs[0] := null;
  x.len := 0;
  x.next := null;
  x.indices := { n: Node :: -1 };

  ghost var x_inflow := { n: Node :: n == x ? KS_multiset : domZero };

  I := interface(x, x_inflow);
}

procedure findNext(n: Node, k: K, ghost In: Interface, implicit ghost C: Set<K>)
  returns (succ: Bool, np: Node)
  requires k in KS
  requires node(n, In, C)
  requires in_inset(k, In, n)
  ensures node(n, In, C)
  ensures succ ==> in_outset(k, In, np)
  ensures !succ ==> !(in_outsets(k, In))
{
  if (n.ptrs[0] == null) {  // Leaf node
    if (n.next == null) {
      return false, null;
    }
    if (le(n.keys[n.len], k)) {
      return true, n.next;
    } else {
      return false, null;
    }
  }

  var found, i := arr_find(n.keys, n.len, k);

  if (i < n.len && k == n.keys[i]) {  // arr_find finds upper bound, we want lower
    i := i + 1;
  }

  if (i == n.len && n.next != null) {
    if (lt(k, n.keys[i])) {
      np := n.ptrs[i];
      return true, np;
    } else {
      np := n.next;
      return true, np;
    }
  } else {
    np := n.ptrs[i];
    return true, np;
  }
}

procedure search(n: Node, k: K, ghost In: Interface, implicit ghost C: Set<K>)
  returns (succ: Bool, res: Bool, implicit ghost C1: Set<K>)
  requires k in KS
  requires node(n, In, C)
  requires in_inset(k, In, n) && !(in_outsets(k, In))
  ensures node(n, In, C1)
  ensures !succ ==> C1 == C
  ensures succ ==> Psi(searchOp, k, C, C1, res)
{
  keyset_implies_leaf(n, In, k, 0);

  var idx: Int;
  res, idx := arr_find(n.keys, n.len, k);

  return true, res;
}

procedure insert(n: Node, k: K, ghost In: Interface, implicit ghost C: Set<K>)
  returns (succ: Bool, res: Bool, implicit ghost C1: Set<K>)
  requires k in KS
  requires node(n, In, C)
  requires in_inset(k, In, n) && !(in_outsets(k, In))
  ensures node(n, In, C1)
  ensures !succ ==> C1 == C
  ensures succ ==> Psi(insertOp, k, C, C1, res)
{
  keyset_implies_leaf(n, In, k, 0);

  if (n.len < 2*B - 1) {
    ghost var m0 := n.keys.map;
    if (n.next != null) {
      n.keys[n.len + 1] := n.keys[n.len];
      set_of_map_equal(m0, n.keys.map, 0, 0, n.len);
    } else {
      n.keys[n.len + 1] := top;
      set_of_map_equal(m0, n.keys.map, 0, 0, n.len);
    }
    ghost var m := n.keys.map;
    var old_len := n.len;

    var idx, new_len := arr_insert(n.keys, k, n.len);
    n.len := new_len;

    map_insert_content_set(m, n.keys.map, idx, k, old_len, new_len);

    pure assert In == interface(n, In.inf) with {
      pure assert (forall k1: K, y: Node ::
        In.out[y][k1] == edgeFn(n, In.inf)[y][k1])
      with {
        pure assert In.inf[n][k1] == In.inf[n][k1];
      }      
    }

    return true, old_len != new_len;
  } else {
    return false, false;
  }
}

procedure delete(n: Node, k: K, ghost In: Interface, implicit ghost C: Set<K>)
  returns (succ: Bool, res: Bool, implicit ghost C1: Set<K>)
  requires k in KS
  requires node(n, In, C)
  requires in_inset(k, In, n) && !(in_outsets(k, In))
  ensures node(n, In, C1)
  ensures !succ ==> C1 == C
  ensures succ ==> Psi(deleteOp, k, C, C1, res)
{
  keyset_implies_leaf(n, In, k, 0);

  ghost var m := n.keys.map;
  var old_len := n.len;

  pure assert set_of_map(n.keys.map, 0, n.len) == C;
  var new_len, idx := arr_delete(n.keys, k, n.len);

  map_delete_content_set(m, n.keys.map, n.len, new_len, idx, k);

  ghost var m1 := n.keys.map;
  n.keys[new_len] := n.keys[n.len];
  set_of_map_equal(m1, n.keys.map, 0, 0, new_len);

  n.len := new_len;

  pure assert In == interface(n, In.inf) with {
    pure assert forall k1: K, y: Node ::
      In.out[y][k1] == edgeFn(n, In.inf)[y][k1]
    with {
      pure assert In.inf[n][k1] == In.inf[n][k1];
    }

  }

  return true, old_len != new_len;
}

