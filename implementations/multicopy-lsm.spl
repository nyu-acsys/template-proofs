options "-abspreds -simplearrays -propreads -stratify -module multicopy-lsm"

include "array_util.spl"

datatype OptionTS = someTS(tst: Int) | noneTS

datatype OptionNode = someNode(nd: Node) | noneNode

datatype NodeType = memtableNode | sstableNode

struct Node {
  var nodeType: NodeType;
  var tableK: Array<K>;
  var tableT: Array<Int>;
  var tableLen: Int;
  var next: Node;
  ghost var indices: Map<K, Int>;  // inverse of tableK for sstableNodes
}

const B: Int

axiom B > 1


define nodeSpatial(x) {
  acc(x) &*& acc(x.tableK) &*& acc(x.tableT)
  &*& x.tableK.length == x.tableT.length
}

function contents_memtable_aux(tableK: Map<Int, K>, tableT: Map<Int, Int>,
    len: Int, i: Int)
  returns (Cn: Map<K, Int>)
{
  0 <= i ?
    (i < len ?
      contents_memtable_aux(tableK, tableT, len, i-1)[tableK[i] := tableT[i]]
      : contents_memtable_aux(tableK, tableT, len, i-1))
    : { k: K :: 0 }
}

define contents_memtable(tableK, tableT, len) {
  contents_memtable_aux(tableK.map, tableT.map, len, len)
}

lemma contents_memtable_found(n: Node, k: K, i: Int)
  requires nodeSpatial(n)
  requires 0 <= i < n.tableLen && n.tableK[i] == k
  requires forall j: Int :: i < j < n.tableLen ==> n.tableK[j] != k
  ensures nodeSpatial(n)
  ensures contents_memtable(n.tableK, n.tableT, n.tableLen)[k] == n.tableT[i]
{
  // TODO missing term/inst?
  pure assert contents_memtable_aux(n.tableK.map, n.tableT.map, n.tableLen, i)
    == contents_memtable_aux(n.tableK.map, n.tableT.map, n.tableLen, i-1)[n.tableK[i] := n.tableT[i]];

  var j := i;
  while (j < n.tableLen)
    invariant i <= j <= n.tableLen
    invariant forall j: Int :: i < j < n.tableLen ==> n.tableK[j] != k
    invariant contents_memtable_aux(n.tableK.map, n.tableT.map, n.tableLen, j)[k]
      == n.tableT[i]
  {
    j := j + 1;

    pure assert j < n.tableLen ==>
      contents_memtable_aux(n.tableK.map, n.tableT.map, n.tableLen, j)
      == contents_memtable_aux(n.tableK.map, n.tableT.map, n.tableLen, j-1)
        [n.tableK[j] := n.tableT[j]];
  }
}

lemma contents_memtable_not_found(n: Node, k: K)
  requires nodeSpatial(n)
  requires 0 <= n.tableLen
  requires forall j: Int :: 0 <= j < n.tableLen ==> n.tableK[j] != k
  ensures nodeSpatial(n)
  ensures contents_memtable(n.tableK, n.tableT, n.tableLen)[k] == 0
{
  var i := -1;

  while (i < n.tableLen)
    invariant -1 <= i <= n.tableLen
    invariant forall j: Int :: 0 <= j < n.tableLen ==> n.tableK[j] != k
    invariant
      contents_memtable_aux(n.tableK.map, n.tableT.map, n.tableLen, i)[k] == 0
  {
    i := i + 1;

    pure assert 0 <= i < n.tableLen ==>
      contents_memtable_aux(n.tableK.map, n.tableT.map, n.tableLen, i)
      == contents_memtable_aux(n.tableK.map, n.tableT.map, n.tableLen, i-1)
        [n.tableK[i] := n.tableT[i]];
    pure assert 0 <= i < n.tableLen ==> n.tableK[i] != k;
  }
}

lemma contents_sstable_not_found(n: Node, k: K,
    ghost r: Node, ghost esn: Map<Node, Set<K>>,
    ghost Cn: Map<K, Int>)
  requires node(r, n, esn, Cn) &*& n.nodeType == sstableNode
  requires forall j: Int :: 0 <= j < n.tableLen ==> n.tableK[j] != k
  ensures node(r, n, esn, Cn)
  ensures Cn[k] == 0
{
  var i := 0;
  while (i < n.tableLen)
    invariant node(r, n, esn, Cn) &*& n.nodeType == sstableNode
    invariant 0 <= i <= n.tableLen
    invariant forall j: Int :: 0 <= j < n.tableLen ==> n.tableK[j] != k
    invariant forall j: Int :: 0 <= j < i ==> n.indices[k] != j
  {
    pure assert n.tableK[i] != k;
    pure assert n.indices[k] != i;
    i := i + 1;
  }
}

lemma contents_memtable_add(tableK: Map<Int, K>, tableT: Map<Int, Int>,
    old_tableK: Map<Int, K>, old_tableT: Map<Int, Int>,
    len: Int, k: K, t: Int)
  requires tableK == old_tableK[len-1 := k]
  requires tableT == old_tableT[len-1 := t]
  requires 0 < len //<= tableK.length && tableK.length == tableT.length
  // requires tableK.length == old_tableK.length && tableT.length == old_tableT.length
  ensures contents_memtable_aux(tableK, tableT, len, len)
    == contents_memtable_aux(old_tableK, old_tableT, len-1, len-1)[k := t]
{
  assert contents_memtable_aux(tableK, tableT, len, len)
    == contents_memtable_aux(tableK, tableT, len, len-1);
  assert contents_memtable_aux(tableK, tableT, len, len-1)
    == contents_memtable_aux(tableK, tableT, len, len-2)[k := t];

  if (len-2 < 0) {
    assert contents_memtable_aux(tableK, tableT, len, len-2)
      == contents_memtable_aux(old_tableK, old_tableT, len-1, len-2);
  } else {
    var i := 0;
    while (i < len-2)
      invariant 0 <= i <= len-2
      invariant contents_memtable_aux(tableK, tableT, len, i)
        == contents_memtable_aux(old_tableK, old_tableT, len-1, i);
      invariant tableK == old_tableK[len-1 := k]
      invariant tableT == old_tableT[len-1 := t]
      invariant 0 < len //<= tableK.length && tableK.length == tableT.length
      // invariant tableK.length == old_tableK.length
        // && tableT.length == old_tableT.length
    {
      i := i + 1;
      assert contents_memtable_aux(tableK, tableT, len, i)
        == contents_memtable_aux(tableK, tableT, len, i-1)[tableK[i] := tableT[i]];
      assert contents_memtable_aux(old_tableK, old_tableT, len-1, i)
        == contents_memtable_aux(old_tableK, old_tableT, len-1, i-1)[tableK[i] := tableT[i]];
    }
  }

  assert contents_memtable_aux(tableK, tableT, len, len-2)
    == contents_memtable_aux(old_tableK, old_tableT, len-1, len-2);
  assert contents_memtable_aux(old_tableK, old_tableT, len-1, len-2)
    == contents_memtable_aux(old_tableK, old_tableT, len-1, len-1);
}

define nodePure(r, n, esn, Cn) {
  true
  // Node is either memtable or sstable:
  && (n.nodeType == memtableNode
      && n == r
      && Cn == contents_memtable(n.tableK, n.tableT, n.tableLen)
    || n.nodeType == sstableNode
      && n != r
      && sorted_map_seg(n.tableK.map, 0, n.tableLen) == true
      // Cn is given by tableK and tableT
      && (forall i: Int :: 0 <= i < n.tableLen ==> Cn[n.tableK[i]] == n.tableT[i])
      // For keys not in tableK, Cn is 0
      && (forall k: K :: n.indices[k] == -1 ==> Cn[k] == 0)
      // n.indices is the inverse of n.tableK
      && (forall k: K :: 0 <= n.indices[k] < n.tableLen
        ==> n.tableK.map[n.indices[k]] == k)
      && (forall i: Int :: 0 <= i < n.tableLen
        ==> n.indices[n.tableK.map[i]] == i @(noinst i))
      && (forall k: K :: -1 <= n.indices[k] < n.tableLen)
  )
  && 0 <= n.tableLen <= n.tableK.length
  // No self-loops
  && n.next != n && n.next != r
  // Edgeset to next node is KS if non-null
  && (n.next != null
    ==> (forall k: K :: k in esn[n.next]))
  // All other nodes have empty edgeset
  && (forall n1: Node :: n1 != n.next ==> esn[n1] == {})
  && esn[null] == {}
}

// TODO make n first or last arg
define node(r, n, esn, Cn) {
  nodeSpatial(n)
  &*& nodePure(r, n, esn, Cn)
}

lemma node_sep_star(r: Node, n: Node, esn: Map<Node, Set<K>>, es1: Map<Node, Set<K>>, C: Map<K, Int>, C1: Map<K, Int>)
  requires node(r, n, esn, C) &*& node(r, n, es1, C1)
  ensures false
{}

lemma node_es_disjoint(r: Node, n: Node, esn: Map<Node, Set<K>>, C: Map<K, Int>)
  requires node(r, n, esn, C)
  ensures node(r, n, esn, C)
  ensures forall k: K, n1: Node, n2: Node ::
    n1 != n2 ==> (k !in esn[n1] || k !in esn[n2]) 
{
  pure assert forall k: K, n1: Node, n2: Node ::
    n1 != n2 ==> (k !in esn[n1] || k !in esn[n2]) 
  with {
    if (n1 != n2) {
      pure assert true;
    }
  }
}

lemma node_es_empty(r: Node, n: Node, esn: Map<Node, Set<K>>, C: Map<K, Int>)
  requires node(r, n, esn, C)
  ensures node(r, n, esn, C)
  ensures forall k: K :: (k !in esn[r] && k !in esn[n])
{}


procedure init()
  returns (r: Node, esr: Map<Node, Set<K>>, Cr: Map<K, Int>)
  ensures node(r, r, esr, Cr)
{
  r := new Node;
  r.tableK := new Array<K>(2*B);
  r.tableT := new Array<Int>(2*B);
  r.tableLen := 0;
  r.next := null;
  r.nodeType := memtableNode;

  esr := { n: Node :: {} };
  Cr := { k: K :: 0 };

  return r, esr, Cr;
}

procedure inContents(n: Node, k: K,
    implicit ghost r: Node, implicit ghost esn: Map<Node, Set<K>>,
    implicit ghost Cn: Map<K, Int>)
  returns (res: OptionTS)
  requires node(r, n, esn, Cn)
  ensures node(r, n, esn, Cn)
  ensures res != noneTS ==> Cn[k] == res.tst
  ensures res == noneTS ==> Cn[k] == 0
{
  if (n.nodeType == memtableNode) {
    var i := n.tableLen - 1;
    var flag := false;
    while (i >= 0 && !flag)
      invariant node(r, n, esn, Cn)
      invariant -1 <= i < n.tableLen
      invariant flag ==> 0 <= i < n.tableLen && n.tableK[i] == k
      invariant forall j: Int :: i < j < n.tableLen ==> n.tableK[j] != k
    {
      if (n.tableK[i] == k) {
        flag := true;
      } else {
        i := i - 1;
      }
    }
    if (flag) {
      contents_memtable_found(n, k, i);
      return someTS(n.tableT[i]);
    } else {
      contents_memtable_not_found(n, k);
      return noneTS;
    }
  } else {
    var b, i := arr_find(n.tableK, n.tableLen, k);
    if (b) {
      return someTS(n.tableT[i]);
    } else {
      contents_sstable_not_found(n, k, r, esn, Cn);
      return noneTS;
    }
  }
}

procedure addContents(n: Node, k: K, t: Int,
    implicit ghost r: Node, implicit ghost esn: Map<Node, Set<K>>,
    implicit ghost Cn: Map<K, Int>)
  returns (succ: Bool, implicit ghost Cn1: Map<K, Int>)
  requires node(r, n, esn, Cn) &*& n == r
  ensures node(r, n, esn, Cn1)
  ensures (succ && Cn1 == Cn[k := t]) || (!succ && Cn1 == Cn)
{
  pure assert n.nodeType == memtableNode;
  pure assert Cn == contents_memtable(n.tableK, n.tableT, n.tableLen);

  if (n.tableLen < n.tableK.length) {
    n.tableK[n.tableLen] := k;
    n.tableT[n.tableLen] := t;
    n.tableLen := n.tableLen + 1;

    contents_memtable_add(
      n.tableK.map, n.tableT.map, old(n.tableK.map), old(n.tableT.map),
      n.tableLen, k, t
    );

    return true;
  } else {
    return false;
  }
}

procedure findNext(n: Node, k: K,
    implicit ghost r: Node, implicit ghost esn: Map<Node, Set<K>>,
    implicit ghost Cn: Map<K, Int>)
  returns (res: OptionNode)
  requires node(r, n, esn, Cn)
  ensures node(r, n, esn, Cn)
  ensures res != noneNode ==> k in esn[res.nd]
  ensures res == noneNode ==> (forall n1: Node :: k !in esn[n1])
{
  if (n.next == null) {  // Leaf node
    return noneNode;
  } else {
    return someNode(n.next);
  }
}

procedure atCapacity(n: Node,
    implicit ghost r: Node, implicit ghost esn: Map<Node, Set<K>>,
    implicit ghost Cn: Map<K, Int>)
  returns (b: Bool)
  requires node(r, n, esn, Cn)
  ensures node(r, n, esn, Cn)
  ensures b == true || b == false
{
  if (n.tableLen < n.tableK.length) {
    return false;
  } else {
    return true;
  }
}

define needsNewNode(r, n, esn, Cn) {
  n.next == null
}

procedure chooseNext(n: Node,
    implicit ghost r: Node, implicit ghost esn: Map<Node, Set<K>>,
    implicit ghost Cn: Map<K, Int>)
  returns (res: OptionNode)
  requires node(r, n, esn, Cn)
  ensures node(r, n, esn, Cn)
  ensures (res == noneNode && needsNewNode(r, n, esn, Cn)
    || res != noneNode && esn[res.nd] != {})
{
  if (n.next != null) {
    return someNode(n.next);
  } else {
    return noneNode;
  }
}

procedure insertNode(n: Node, m: Node,
    implicit ghost r: Node, implicit ghost esn: Map<Node, Set<K>>,
    implicit ghost Cn: Map<K, Int>)
  returns (ghost esn1: Map<Node, Set<K>>, ghost esm: Map<Node, Set<K>>, ghost Cm: Map<K, Int>)
  requires node(r, n, esn, Cn) &*& nodeSpatial(m)
  requires needsNewNode(r, n, esn, Cn) &*& m != r
  ensures node(r, n, esn1, Cn) &*& node(r, m, esm, Cm)
  ensures esn1[m] != {} && esn1 == esn[m := esn1[m]]
  ensures esm == { x: Node :: {} } && Cm == { k: K :: 0 }
{
  pure assert n != m;
  n.next := m;
  esn1 := { x: Node :: x == m ? { k: K :: true } : {} };

  m.tableLen := 0;
  m.next := null;
  m.nodeType := sstableNode;
  m.indices := { k: K :: -1 };
  esm := { x: Node :: {} };
  Cm := { k: K :: 0 };

  return esn1, esm, Cm;
}
