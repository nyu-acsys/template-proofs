/** {Spec} Flow domain setup for verifying give-up template implementations */

include "css.spl"
include "flows.spl"
include "multiset-ccm.spl"

type FlowDom = Multiset

pure function KS() returns (res: Set<K>)

/** {Spec} Definitions of predicates used in give-up template proof in Iris */

define in_inset(k, I, n) {
  I.inf[n][k] > 0
}
  
define in_outset(k, I, n) {
  I.out[n][k] > 0
}

predicate in_outsets(k: K, I: Interface)
{
  exists n: Node :: in_outset(k, I, n)
}

function keyset(I: Interface, n: Node) returns (res: Set<K>)
{
  { k: K :: in_inset(k, I, n) && !(in_outsets(k, I)) }
}

/* Global invariant \phi that needs to be maintained */
predicate globalinv(root: Node, I: Interface)
{
  intValid(I)
  && root in I.dom
  // Global interface is closed
  && (forall n: Node, k: K :: !(in_outset(k, I, n)))
  && (forall k: K :: k in KS ==> in_inset(k, I, root))
}

/* Useful auxiliary lemma */
lemma domMinus_inv(m1: Multiset, m2: Multiset)
  ensures m1 == domPlus(m2, domMinus(m1, m2))
{
  pure assert forall k: K :: m1[k] == domPlus(m2, domMinus(m1, m2))[k] with {
    pure assert m1[k] == m2[k] + (m1[k] - m2[k]);
    pure assert m1[k] == m2[k] + domMinus(m1, m2)[k];
  }
}

lemma expand_inf1(n: Node, k: K, I1: Interface, I2: Interface)
  requires intValid(intComp(I1, I2))
  ensures n in I1.dom ==> I1.inf[n][k] == intComp(I1, I2).inf[n][k] + I2.out[n][k]
{
  lemma_int_comp_unfold(I1, I2);
  pure assert n in I1.dom ==> I1.inf[n] == domPlus(intComp(I1, I2).inf[n], I2.out[n]);
}

lemma expand_inf2(n: Node, k: K, I1: Interface, I2: Interface)
  requires intValid(intComp(I1, I2))
  ensures n in I2.dom ==> I2.inf[n][k] == intComp(I1, I2).inf[n][k] + I1.out[n][k]
{
  intComp_comm(I1, I2);
  expand_inf1(n, k, I2, I1);
}

lemma expand_out(n: Node, k: K, I1: Interface, I2: Interface)
  requires intValid(intComp(I1, I2))
  ensures n !in intComp(I1, I2).dom ==> intComp(I1, I2).out[n][k] == I1.out[n][k] + I2.out[n][k]
{
  lemma_int_comp_unfold(I1, I2);
  pure assert n !in intComp(I1, I2).dom ==> intComp(I1, I2).out[n] == domPlus(I1.out[n], I2.out[n]);  
}

lemma expand(n: Node, k: K, I1: Interface, I2: Interface)
  requires intValid(intComp(I1, I2))
  ensures n in I1.dom ==> I1.inf[n][k] == intComp(I1, I2).inf[n][k] + I2.out[n][k]
  ensures n in I2.dom ==> I2.inf[n][k] == intComp(I1, I2).inf[n][k] + I1.out[n][k]
  ensures n !in intComp(I1, I2).dom ==> intComp(I1, I2).out[n][k] == I1.out[n][k] + I2.out[n][k]
{
  expand_inf1(n, k, I1, I2);
  expand_inf2(n, k, I1, I2);
  expand_out(n, k, I1, I2);
}