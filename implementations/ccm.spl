/** {Spec} Theory of cancellative commutative monoids (CCMs) */

options "-simplearrays -propreads -abspreds -stratify"


// The type of the flow domain
type FlowDom

// The monoid operation
function domPlus(p1: FlowDom, p2: FlowDom) returns (p: FlowDom)

// Partial inverse of monoid operation
function domMinus(p1: FlowDom, p2: FlowDom) returns (p: FlowDom)

// Neutral element
function domZero() returns (p: FlowDom)

// Refinement predicate for flow domain values
pure predicate domValid(p: FlowDom)

// Unproven lemmas stated below are the axioms of CCMs.
// They are proven for each specific CCM that we consider.
  
// domZero is unit of domPlus
lemma domZero_unit(p: FlowDom)
  ensures domPlus(p, domZero) == p

// domPlus is associative
lemma domPlus_assoc(p1: FlowDom, p2: FlowDom, p3: FlowDom)
  ensures domPlus(p1, domPlus(p2, p3)) == domPlus(domPlus(p1, p2), p3)

// domPlus is commutative
lemma domPlus_comm(p1: FlowDom, p2: FlowDom)
  ensures domPlus(p1, p2) == domPlus(p2, p1)
  
// domPlus is cancellative
lemma domPlus_canc(p1: FlowDom, p2: FlowDom, p3: FlowDom)
requires domPlus(p1, p2) == domPlus(p1, p3)
ensures p2 == p3

// domMinus is partial inverse of domPlus
lemma domMinus_pinv(p1: FlowDom, p2: FlowDom)
ensures domMinus(domPlus(p1, p2), p1) == p2 

// domZero is valid
lemma domZero_valid()
ensures domValid(domZero);

// Validity is preserved by domPlus
lemma domPlus_valid(p1: FlowDom, p2: FlowDom)
requires domValid(p1) && domValid(p2)
ensures domValid(domPlus(p1, p2))

/** {Spec} End of CCM axioms */

lemma domMinus_unit(p: FlowDom)
ensures domMinus(p, domZero) == p
{
domMinus_pinv(domZero, p);
domPlus_comm(domZero, p);
domZero_unit(p);
}

lemma domMinus_plus(p1: FlowDom, p2: FlowDom, p3: FlowDom)
requires p1 == domPlus(p2, p3)
ensures p2 == domMinus(p1, p3)
{
domPlus_comm(p2, p3);
domMinus_pinv(p3, p2);
}

